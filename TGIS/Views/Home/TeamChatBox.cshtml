@using TGIS.Models;
@{
    string userID = ViewBag.UserID.ToString();
    List<string> teamIDs = (List<string>)ViewBag.TeamIDs;
    List<bool> isTeamPrivateFlags = (List<bool>)ViewBag.IsTeamPrivateFlags;
    TGISDBEntities db = new TGISDBEntities();
    var teams = db.Teams;
    string shopMark = "";
    int count = 0;
}
@*
    包含所有聊天室的容器是class = "chatArea"
        單個聊天室外殼需有class="chatBox"，以下兩區塊被包含在其中
            訊息顯示區需有class="msgDisplay"
            訊息輸入區需有class="msgInput"

    區分玩家訊息和店家訊息的邏輯：
    由於同一個團是用IsPrivate這個屬性來判斷是否為跟店家連絡的訊息
    所以除了傳入teamIDs這個陣列外
    還要傳入isTeamPrivateFlags這個陣列來得到對應的IsPrivate狀態
    在後端也會依據IsPrivate來創立獨立的房間
*@
@if (Session["PlayerID"] != null)
{
    <link href="~/Content/ChatBoxStyle-P.css" rel="stylesheet" />
}
else
{
    <link href="~/Content/ChatBoxStyle-S.css" rel="stylesheet" />
}


<div class="bg-tab chatArea">
    <div id="title-clo" class="m-3">
        <a data-toggle="collapse" href="#msg" aria-controls="msg" role="button" aria-expanded="false" class="title-msg">
            <sapn class="ml-1"><i class="far fa-comment-alt"></i><br />&nbsp;揪<br />&nbsp;桌<br />&nbsp;訊<br />&nbsp;息</sapn>
        </a>
    </div>
    @{
        Team team;
        <div class="row collapse" id="msg">
            <div class="col-12 d-flex justify-content-between m-2">
                <sapn>揪桌訊息</sapn>
                <a data-toggle="collapse" href="#msg" aria-controls="msg" role="button" aria-expanded="false" class="title-msg pr-3" id="title-opn">
                    <i class="fas fa-minus"></i>
                </a>
            </div>
            <div class="col-4 p-0 bg-gray">
                @*店家帳號時<ul>不用出現*@
                <ul class="nav nav-fill bg-tab text-info">
                    <li class="nav-item border border-light">
                        <a class="nav-link active" href="#list-tabP" data-toggle="list" role="tab">團訊</a>
                    </li>
                    <li class="nav-item border border-light">
                        <a class="nav-link" href="#list-tabS" data-toggle="list" role="tab">訂位</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="list-tabP" role="tabpanel">
                        <div class="list-group" role="tablist">
                            @{
                                string active = "active";
                            }
                            @foreach (string id in teamIDs)
                            {
                                team = teams.Find(id);
                                if (isTeamPrivateFlags[count])
                                {
                                    string displayTitle = Session["PlayerID"] == null ? team.LeaderPlayer.NickName : team.Shop.ShopName;
                                    <a class="list-group-item list-group-item-action chatbtn bg-tab @active" id="msg_shop_@team.ID-list" data-toggle="list" href="#msg_shop_@team.ID" role="tab" aria-controls="msg_shop_@team.ID">@displayTitle</a>
                                }
                                else
                                {
                                    <a class="list-group-item list-group-item-action chatbtn bg-tab @active" id="msg_@team.ID-list" data-toggle="list" href="#msg_@team.ID" role="tab" aria-controls="msg_@team.ID">@team.Title</a>
                                }
                                active = "";
                                count++;
                            }
                        </div>
                    </div>
                    <div class="tab-pane" id="list-tabS" role="tabpanel">
                        @*@{
                                active = "active";
                            }
                            @foreach (string id in teamIDs)
                            {
                                team = teams.Find(id);
                                if (isTeamPrivateFlags[count])
                                {
                                    string displayTitle = Session["PlayerID"] == null ? team.LeaderPlayer.NickName : team.Shop.ShopName;
                                    <a class="list-group-item list-group-item-action chatbtn bg-tabS @active" id="msg_shop_@team.ID-list" data-toggle="list" href="#msg_shop_@team.ID" role="tab" aria-controls="msg_shop_@team.ID">@displayTitle</a>
                                }
                                else
                                {
                                    <a class="list-group-item list-group-item-action chatbtn bg-tabP @active" id="msg_@team.ID-list" data-toggle="list" href="#msg_@team.ID" role="tab" aria-controls="msg_@team.ID">@team.Title</a>
                                }
                                active = "";
                                count++;
                            }*@
                        測試
                    </div>
                </div>
            </div>
            <div class="col-8 p-0">
                <div class="tab-content card" id="nav-tabContent">
                    @{ active = "show active"; count = 0;}
                    @foreach (string id in teamIDs)
                    {
                        team = teams.Find(id);
                        shopMark = isTeamPrivateFlags[count] ? "shop_" : "";
                        <div class="chatBox tab-pane fade @active" id="msg_@shopMark@team.ID" role="tabpanel" aria-labelledby="msg_@shopMark@team.ID-list">
                            <div class="card-header bg-msg">
                                <div class="">@team.Title</div>
                            </div>
                            <div class="card-body msgDisplay">
                                @* 顯示歷史訊息 *@
                                @{ var message = isTeamPrivateFlags[count] ? team.Messages.Where(m => m.IsPrivate) : team.Messages.Where(m => !m.IsPrivate);}
                                @foreach (Message m in message)
                                {
                                    //如果是自己的訊息
                                    if (m.Speaker == userID)
                                    {
                                        <div class="alert alert-info">
                                            <p class="mt-0">@m.Content</p> //發言內容
                                            <p class="mt-0">@m.MessageDate.ToString("MM/dd hh:mm")</p> //發言時間
                                        </div>
                                    }
                                    //別人的訊息
                                    else
                                    {
                                        <p class="mb-0">@UsefulTools.GetUserNameByID(userID)：</p> //發言人暱稱
                                        <img src="@Url.Action("GetPhotoBySourceID", "Photo", new { sourceID=userID, index=0})" /> //發言人圖片
                                        <p class="mt-0">@m.Content</p> //發言內容
                                        <p class="mt-0">@m.MessageDate.ToString("MM/dd hh:mm")</p>//發言時間
                                    }
                                }
                            </div>
                            <div class="card-footer input-group bg-msg">
                                <div class="input-group-prepend">
                                    <div class="input-group-text" id="btnGroupAddon">
                                        <i class="far fa-comment-dots"></i>
                                    </div>
                                </div>
                                <input type="text" class="form-control msgInput" aria-describedby="btnGroupAddon">
                            </div>
                        </div>
                        active = "";
                        count++;
                    }
                </div>
            </div>
        </div>

    }
</div>
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script>
        /*
     *  作法：
     *  登入後依據此玩家的隊伍數量建立訊息窗口
     *  每個窗口都建立各自的websocket
     *  每個輸入框也使用各自的websocket來使用send方法
     */
    var c = console.log;
    //將此玩家的teamIDs(C#)轉換為JS陣列
    var teamIDs = [];
    @foreach(string id in teamIDs)
    {
        @: teamIDs.push("@id");
    }
    var isTeamPrivateFlags = [];
    @foreach(bool f in isTeamPrivateFlags)
    {
        @: isTeamPrivateFlags.push(@f.ToString().ToLower());
    }
    //取得所有.chatBox
    var boxes = $(".chatBox");
    for (var i = 0; i < teamIDs.length; i++) {
        //要使用let建立局部變量才不會相互衝突
        let chatBox = boxes.eq(i);
        let url = `ws://localhost:55525/api/TeamChat?userName=@UsefulTools.GetUserNameByID(userID)&teamID=${teamIDs[i]}&userID=@userID&isPrivate=${isTeamPrivateFlags[i]}`;
        let ws = new WebSocket(url);

        ws.onmessage = function (e) {
            var msgDisplay = chatBox.find(".msgDisplay");
            //取得Json資料
            var jsonData = JSON.parse(e.data);
            //判斷是否為自己的訊息
            if (jsonData.UserID == "@userID") {
                //如果是自己的訊息...
            } else {
                //如果是別人的訊息...
            }
            //填入發言人名稱
            msgDisplay.append(`<p>${jsonData.UserName}</p>`);
            //填入訊息
            msgDisplay.append(`<p>${jsonData.Message}</p>`);
            //填入發送時間
            msgDisplay.append(`<p>${jsonData.Time}</p>`);
            //填入發言人圖片
            msgDisplay.append(`<img src="@Url.Action("GetPhotoBySourceID", "Photo")?sourceID=${jsonData.UserID}&index=0" class="img-fluid" />`);


            //將訊息框拉至底部
            msgDisplay.scrollTop(msgDisplay.get(0).scrollHeight);
        }

        //在輸入框中按下Enter送出訊息
        chatBox.find(".msgInput").keypress(function (e) {
            if (e.keyCode == 13) {
                //輸入不為空白才送出訊息
                if ($(this).val().trim().length > 0)
                    ws.send($(this).val());
                //清空輸入框
                $(this).val("");
            }
        });
    }
        //摺疊鈕變化
    $('#title-clo').click(function () {
        $(this).css("display", "none");
    });
    $('#title-opn').click(function () {
        $('#title-clo').css("display", "block");
    });

</script>
