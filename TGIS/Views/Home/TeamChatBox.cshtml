@using TGIS.Models;
@{
    ViewBag.Title = "Test";
    Player player = (Player)ViewBag.Player;
    List<string> teamIDs = (List<string>)ViewBag.TeamIDs;
    TGISDBEntities db = new TGISDBEntities();
    var teams = db.Teams;
}
@*
    包含所有聊天室的容器是class = "chatArea"
        單個聊天室外殼需有class="chatBox"，以下兩區塊被包含在其中
            訊息顯示區需有class="msgDisplay"
            訊息輸入區需有class="msgInput"
*@
<style>
    .chatArea {
        position: fixed;
        top: 70px;
        right: 30px;
        z-index: 999;
    }

    .chatBox {
        min-width: 150px;
        border: 1px #000 solid;
        height: 300px;
        
    }
    .msgDisplay {
    overflow-y:scroll;
    }
    .msgInput {
    }
</style>

<div class="row chatArea">
    @{
        Team team;
        foreach (string id in teamIDs)
        {
            team = teams.Find(id);
            <div class="chatBox card ml-1">
                <div class="card-header d-flex justify-content-between">
                    <span>@team.Title</span>
                    <span><i class="fas fa-minus"></i></span>
                </div>
                <div class="msgDisplay card-body">
                    @* 顯示歷史訊息 *@
                    @foreach (Message m in team.Messages)
                    {
                        <p class="small mb-0">@db.Players.Find(m.Speaker).NickName：</p>
                        <p class="mt-0">@m.Content</p>
                    }
                </div>
                <div class="card-footer input-group">                   
                        <div class="input-group-prepend">
                            <div class="input-group-text" id="btnGroupAddon"><i class="far fa-comment-dots"></i></div>
                        </div>
                        <input type="text" class="form-control msgInput" aria-describedby="btnGroupAddon">
                    @*打字不會換行,沒有更新頁面下訊息顯示不會換行*@
                </div>
            </div>
        }
    }
</div>



<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script>
        /*
     *  作法：
     *  登入後依據此玩家的隊伍數量建立訊息窗口
     *  每個窗口都建立各自的websocket
     *  每個輸入框也使用各自的websocket來使用send方法
     */
    var c = console.log;
    //將此玩家的teamIDs(C#)轉換為JS陣列
    var teamIDs = [];
    @foreach(string id in teamIDs)
    {
        @: teamIDs.push("@id");
    }
    //取得所有.chatBox
    var boxes = $(".chatBox");
    for (var i = 0; i < teamIDs.length; i++) {
        //要使用let建立局部變量才不會相互衝突
        let chatBox = boxes.eq(i);
        let url = `ws://localhost:55525/api/TeamChat?userName=@player.NickName&teamID=${teamIDs[i]}&userID=@player.ID`;
        let ws = new WebSocket(url);

        ws.onopen = function (e) {
        }
        ws.onmessage = function (e) {
            var msgDisplay = chatBox.find(".msgDisplay");
            msgDisplay.append(`<p>${e.data}</p>`);
            msgDisplay.scrollTop(msgDisplay.get(0).scrollHeight);
        }

        //在輸入框中按下Enter送出訊息
        chatBox.find(".msgInput").keypress(function (e) {
            if (e.keyCode == 13) {
                //輸入不為空白才送出訊息
                if ($(this).val().trim().length > 0)
                    ws.send($(this).val());
                //清空輸入框
                $(this).val("");
            }
        });
    }

    //剛進入頁面就將所有訊息框拉至底部
    for (var i = 0; i < $(".msgDisplay").length; i++) {
        var box = $(".msgDisplay").eq(i);
        box.scrollTop(box.get(0).scrollHeight);
    }

</script>
